#!/bin/bash
#
# self_chat_loop.sh
#
# This script simulates an autonomous brainstorming session between two AI personas:
# a "Researcher" and a "Coder". It runs a conversation for a specified number
# of turns, with each persona's response being generated by the LLM.
#
# A key feature of this script is the integrated ethics check. After each turn,
# the generated response is scanned for bias and other violations. If any are
# found, they are logged, and a "Moderator" message is injected into the
# conversation to guide it back to safe topics.
#
# The entire conversation is logged to the file specified by $SELF_CHAT_LOG_FILE.
#
# Usage: ./self_chat_loop.sh [number_of_turns]
#

# Source utility functions and environment variables
source "$(dirname "$0")/utils.sh"
setup_env

# The number of conversational turns to simulate. Defaults to 20.
TURNS=${1:-20}

# Initialize the conversation with a starting prompt if the log file is empty.
if [[ ! -s "$SELF_CHAT_LOG_FILE" ]]; then
    echo "Researcher: Let's start brainstorming about programming optimizations." > "$SELF_CHAT_LOG_FILE"
    echo "Coder: Great, I will focus on practical code improvements." >> "$SELF_CHAT_LOG_FILE"
fi

# Checks a response for rule violations, logs them, and injects a moderator note.
#
#   $1: The persona whose response is being checked (e.g., "Researcher").
#   $2: The text of the response to check.
check_and_log_violations() {
    local persona="$1"
    local response="$2"
    local violations=()

    # Run the ethics and bias checker and capture its JSON output.
    # The `2>/dev/null` suppresses errors from the checker itself, and the `||` provides a fallback.
    local ethics_result
    ethics_result=$("$PRISM_QUANTA_ROOT/scripts/ethics_bias_checker.sh" --text "$response" --json 2>/dev/null || echo '{"status":"error"}')
    
    # If the checker returns a "fail" status, parse the violations.
    if [[ "$(echo "$ethics_result" | jq -r '.status')" == "fail" ]]; then
        local bias_violations
        bias_violations=$(echo "$ethics_result" | jq -r '.violations[]' 2>/dev/null)
        while IFS= read -r violation; do
            # Add valid violations to the array.
            [[ -n "$violation" ]] && violations+=("bias:$violation")
        done <<< "$bias_violations"
    fi

    # If any violations were found, take action.
    if [[ ${#violations[@]} -gt 0 ]]; then
        log_warn "Violations detected in $persona's response."
        # Log the detailed violation to the main ethics log for auditing.
        mkdir -p "$(dirname "$ETHICS_LOG")"
        {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Violation in self-chat by $persona:"
            printf '  - %s\n' "${violations[@]}"
            echo "  Response: $response"
            echo "---"
        } >> "$ETHICS_LOG"

        # Inject a moderator note into the chat to steer the conversation away from problematic topics.
        local moderator_note="Moderator: Let's steer the conversation back to productive and compliant topics. Please avoid discussing potentially problematic subjects."
        echo "$moderator_note" >> "$SELF_CHAT_LOG_FILE"
        log_info "Moderator intervened in self-chat."
    fi
}

# --- Pre-run Checks ---
check_deps "jq"
if [[ ! -x "$PRISM_QUANTA_ROOT/scripts/ethics_bias_checker.sh" ]]; then
    log_error "Ethics checker script is not executable."
fi

# --- Main Conversation Loop ---
for (( i=0; i<TURNS; i++ )); do
    # --- Researcher's Turn ---
    # Construct the prompt by taking the entire conversation history.
    prompt=$(cat "$SELF_CHAT_LOG_FILE")
    prompt+=$'\nResearcher:' # Append the persona to prompt for a response.

    # Generate the response using the LLM.
    response=$("$PRISM_QUANTA_ROOT/scripts/polling.sh" "$LLAMACPP_PATH/main" -m "$MODEL_PATH" -p "$prompt" -n 150)

    # Log and check the response.
    echo "Researcher: $response" >> "$SELF_CHAT_LOG_FILE"
    log_info "Researcher says: $response"
    check_and_log_violations "Researcher" "$response"

    # --- Coder's Turn ---
    # Repeat the process for the Coder persona.
    prompt=$(cat "$SELF_CHAT_LOG_FILE")
    prompt+=$'\nCoder:'
    response=$("$PRISM_QUANTA_ROOT/scripts/polling.sh" "$LLAMACPP_PATH/main" -m "$MODEL_PATH" -p "$prompt" -n 150)

    echo "Coder: $response" >> "$SELF_CHAT_LOG_FILE"
    log_info "Coder says: $response"
    check_and_log_violations "Coder" "$response"
done

log_info "Self-chat loop completed. See conversation log at: $SELF_CHAT_LOG_FILE"
