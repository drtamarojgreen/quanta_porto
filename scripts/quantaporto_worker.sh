#!/bin/bash
# quantaporto_worker.sh - Translates a single PQL task XML file into an executable script.

set -euo pipefail
IFS=$'\n\t'

# Source environment using a robust method
source "$(dirname "${BASH_SOURCE[0]}")/utils.sh"
setup_env

# --- Input Validation ---
if [[ -z "${1:-}" ]]; then
    log_error "Usage: $0 <path_to_task_xml>"
    exit 1
fi
TASK_FILE="$1"
if [[ ! -f "$TASK_FILE" ]]; then
    log_error "Task file not found: $TASK_FILE"
    exit 1
fi

# --- Logic ---

# 1. Parse Task ID from the XML file. Example: <task id="some-id">
# We use grep with -o to extract only the matching part, then sed to capture the group.
TASK_ID=$(grep -o 'id="[^"]*"' "$TASK_FILE" | sed 's/id="\([^"]*\)"/\1/')
if [[ -z "$TASK_ID" ]]; then
    log_error "Could not parse task ID from $TASK_FILE"
    exit 1
fi
log_info "QuantaPorto Worker: Processing task $TASK_ID..."

# 2. Parse commands from the XML file. Example: <command>do something</command>
# We use grep to find the lines, then sed to strip the tags and leading/trailing whitespace.
COMMANDS=$(grep '<command>' "$TASK_FILE" | sed -e 's/^[[:space:]]*<command>//' -e 's/<\/command>[[:space:]]*$//')

if [[ -z "$COMMANDS" ]]; then
    log_warn "No commands found for task $TASK_ID. Creating an empty action script."
fi

# 3. Create the output script in the pending actions directory
ACTION_SCRIPT_PATH="${ACTIONS_PENDING_DIR}/${TASK_ID}.sh"

# Write the script header
{
    echo "#!/bin/bash"
    echo "# Action script for task: $TASK_ID"
    echo "# Generated by QuantaPorto at $(date)"
    echo ""
    echo "set -e"
    echo ""
} > "$ACTION_SCRIPT_PATH"

# Append the extracted commands
echo "$COMMANDS" >> "$ACTION_SCRIPT_PATH"

# Make the script executable
chmod +x "$ACTION_SCRIPT_PATH"

log_info "Successfully created action script: $ACTION_SCRIPT_PATH"

exit 0
